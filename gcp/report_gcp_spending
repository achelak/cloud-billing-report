#!/usr/bin/perl
# Written by Erich Weiler
# Get Google Cloud Platform Daily costs and report via email to users
# This must run via cron each day at 9:00am PST or later

use strict;
use warnings;

use Text::CSV;
use DBI;
use File::Spec::Functions 'catfile';

chdir('/root/gcp-reporting');

# Load configuration
my $config = do "./config.pl";
die "Error parsing config file: $@" if $@;
die "Error reading config file: $!" unless defined $config;

# Initialize database connection
my $connect = DBI->connect(
    "DBI:mysql:database=$config->{db}{database};host=$config->{db}{host}",
    $config->{db}{user},
    $config->{db}{pass},
    { RaiseError => 1 }
);

my $csv = Text::CSV->new( { sep_char => ',' } );

# Initialize date variables

chomp( my $current_day       = `/usr/bin/date +\"\%B \%d, \%Y\"` );
chomp( my $today             = `/usr/bin/date +\"\%-d\"` );
chomp( my $yesterday         = `/usr/bin/date +\"\%-d\" --date=\"-1 day\"` );
chomp( my $month             = `/usr/bin/date +\"\%m\"` );
chomp( my $last_month        = `/usr/bin/date +\"\%m\" --date=\"-1 month\"` );
chomp( my $year              = `/usr/bin/date +\"\%Y\"` );
chomp( my $last_year         = `/usr/bin/date +\"\%Y\" --date=\"-1 year\"` );
chomp( my $today_mysqlformat = `/usr/bin/date +\"%Y-\%m-\%d\"` );
chomp( my $yesterday_mysqlformat =
        `/usr/bin/date +\"%Y-\%m-\%d\" --date=\"-1 day\"` );

if ( defined $ENV{REPORT_DATE} ) {
    chomp( $current_day =
            `/usr/bin/date -d '$ENV{REPORT_DATE}' +\"\%B \%d, \%Y\"` );
    chomp( $today = `/usr/bin/date -d '$ENV{REPORT_DATE}' +\"\%-d\"` );
    chomp( $yesterday =
            `/usr/bin/date +\"\%-d\" --date=\"$ENV{REPORT_DATE} - 1 day\"` );
    chomp( $month = `/usr/bin/date -d '$ENV{REPORT_DATE}' +\"\%m\"` );
    chomp( $last_month =
            `/usr/bin/date +\"\%m\" --date=\"$ENV{REPORT_DATE} - 1 month\"` );
    chomp( $year = `/usr/bin/date -d '$ENV{REPORT_DATE}' +\"\%Y\"` );
    chomp( $last_year =
            `/usr/bin/date +\"\%Y\" --date=\"$ENV{REPORT_DATE} - 1 year\"` );
    chomp( $today_mysqlformat =
            `/usr/bin/date -d '$ENV{REPORT_DATE}' +\"%Y-\%m-\%d\"` );
    chomp( $yesterday_mysqlformat =
            `/usr/bin/date +\"%Y-\%m-\%d\" --date=\"$ENV{REPORT_DATE} -1 day\"`
    );
}

# Bucket name with billing data in it

my $bucket     = $config->{gcp}{bucket};
my $total_cost = 0;

# Initialize Service Cost Hashes and Cost Differential hashes

my %computeEngine;
my %cloudStorage;
my %logging;
my %cloudfunctions;
my %pubsub;
my %total;
my $yesterday_total = 0.00;

my %computeEngine_diff;
my %cloudStorage_diff;
my %logging_diff;
my %cloudfunctions_diff;
my %pubsub_diff;
my %total_diff;

# Initialize cost differential hashes to zero

foreach my $project ( @{ $config->{gcp}{projects} } ) {
    $computeEngine_diff{$project}  = 0.00;
    $cloudStorage_diff{$project}   = 0.00;
    $logging_diff{$project}        = 0.00;
    $cloudfunctions_diff{$project} = 0.00;
    $pubsub_diff{$project}         = 0.00;
    $total_diff{$project}          = 0.00;
}

# Support Cost tally

my $supportCost = 0;

# Get all GCP billing CSV files for the month so far
# GCP only shows charges for a single day in each CSV file,
# so we need to get them all for this month before tallying stats

# Date          file_year   file_month
# 1 Jan 2020    2019        12
# 2 Jan 2020    2020        1
# 1 Feb 2020    2020        1
my $file_year  = $today == 1 && $month eq "01" ? $last_year : $year;
my $file_month = $today > 1                    ? $month     : $last_month;
foreach my $days ( 1 .. $yesterday ) {
    my $padded_day = sprintf( "%02d", $days );
    grab_csv_data("billing-report--$file_year-$file_month-$padded_day.csv");
}

# Open the CSV file and iterate through each line to grab all the data
sub grab_csv_data {
    my $cache_dir = "/root/gcp-reporting/cache/";
    `mkdir -p $cache_dir`;
    my $fname       = $_[0];
    my $workingFile = catfile( $cache_dir, $fname );
    unless ( -e $workingFile ) {
        print "Getting new file $fname\n";
        `/root/google-cloud-sdk/bin/gsutil cp gs://$bucket/$fname $cache_dir`;
    }

    open( my $data, '<', $workingFile )
        or die "Could not open '$workingFile' $!\n";

    $csv->column_names( $csv->getline($data) );
    while ( my $href = $csv->getline_hr($data) ) {
        my $lineitem = $href->{'Line Item'};
        my @service  = split( '/', $lineitem );
        foreach my $project ( @{ $config->{gcp}{projects} } ) {
            if ( $href->{'Project Name'} eq "$project" ) {

                if ( $service[2] eq "compute-engine" ) {
                    if ( $computeEngine{"$project"} ) {
                        $computeEngine{"$project"} =
                            $computeEngine{"$project"} + $href->{'Cost'};
                    }
                    else {
                        $computeEngine{"$project"} = $href->{'Cost'};
                    }
                }

                if ( $service[2] eq "cloud-storage" ) {
                    if ( $cloudStorage{"$project"} ) {
                        $cloudStorage{"$project"} =
                            $cloudStorage{"$project"} + $href->{'Cost'};
                    }
                    else {
                        $cloudStorage{"$project"} = $href->{'Cost'};
                    }
                }

                if ( $service[2] eq "logging" ) {
                    if ( $logging{"$project"} ) {
                        $logging{"$project"} =
                            $logging{"$project"} + $href->{'Cost'};
                    }
                    else {
                        $logging{"$project"} = $href->{'Cost'};
                    }
                }

                if ( $service[2] eq "cloudfunctions" ) {
                    if ( $logging{"$project"} ) {
                        $cloudfunctions{"$project"} =
                            $cloudfunctions{"$project"} + $href->{'Cost'};
                    }
                    else {
                        $cloudfunctions{"$project"} = $href->{'Cost'};
                    }
                }

                if ( $service[2] eq "pubsub" ) {
                    if ( $pubsub{"$project"} ) {
                        $pubsub{"$project"} =
                            $pubsub{"$project"} + $href->{'Cost'};
                    }
                    else {
                        $pubsub{"$project"} = $href->{'Cost'};
                    }
                }

            }
        }

        if ( $service[2] eq "support" ) {
            $supportCost = $supportCost + $href->{'Cost'};
        }

    }

    close($data);
}

# The cost differential subroutine
sub print_diff {

   # Some services do not have history stored because of the current db schema
   # and will be passed to `print_diff` as undef
    if ( not( defined $_[0] ) or $_[0] eq "" ) {
        return "N/A";

        # Ignore sufficiently small amounts
    }
    elsif ( $_[0] > 0.01 ) {
        return sprintf( "\$%.2f", $_[0] );
    }
    elsif ( $_[0] < -0.01 ) {

        # A negative value is unlikely but possible in the event of, for
        # example, a credit
        my $absolute = sprintf( "-\$%.2f", abs( $_[0] ) );
        return "<span class='neg'>$absolute</span>";
    }
    else {
        return "";
    }
}

# Set cost tallies to zero if none were incurred.
foreach my $project ( @{ $config->{gcp}{projects} } ) {
    if ( !( $computeEngine{$project} ) ) {
        $computeEngine{$project} = "0.00";
    }

    if ( !( $cloudStorage{$project} ) ) {
        $cloudStorage{$project} = "0.00";
    }

    if ( !( $logging{$project} ) ) {
        $logging{$project} = "0.00";
    }

    if ( !( $cloudfunctions{$project} ) ) {
        $cloudfunctions{$project} = "0.00";
    }

    if ( !( $pubsub{$project} ) ) {
        $pubsub{$project} = "0.00";
    }
}

# Normalize numbers to two decimal places

foreach my $project ( @{ $config->{gcp}{projects} } ) {
    $computeEngine{$project}  = sprintf( "%.2f", $computeEngine{$project} );
    $cloudStorage{$project}   = sprintf( "%.2f", $cloudStorage{$project} );
    $logging{$project}        = sprintf( "%.2f", $logging{$project} );
    $cloudfunctions{$project} = sprintf( "%.2f", $cloudfunctions{$project} );
    $pubsub{$project}         = sprintf( "%.2f", $pubsub{$project} );
}
$supportCost = sprintf( "%.2f", $supportCost );

# Compute total costs per project

foreach my $project ( @{ $config->{gcp}{projects} } ) {
    $total{$project} =
          $computeEngine{$project}
        + $cloudStorage{$project}
        + $logging{$project}
        + $cloudfunctions{$project}
        + $pubsub{$project};
}

# Compute grand total

my $grand_total = 0.00;
foreach my $project ( @{ $config->{gcp}{projects} } ) {
    $grand_total = $grand_total + $total{$project};
}

# Get cost differentials from yesterday until today

# Report generation lags by one day. (For example, the report for August 8 will
# become available on August 9.) So on the second of the month, we generate the
# email report for the first day of the month. And on the first day of the
# month it is also the first day of the billing period, which means that the
# Yesterday value shold be equal to the Month value

foreach my $project ( @{ $config->{gcp}{projects} } ) {
    if ( $today != 2 ) {
        my $grab = $connect->prepare(
            "SELECT * FROM \`$project\` WHERE report_date = ?");
        $grab->execute($yesterday_mysqlformat);

        if ( $grab->rows > 0 ) {
            while ( my @data = $grab->fetchrow_array() ) {
                $computeEngine_diff{$project} =
                    ( $computeEngine{$project} - $data[1] );
                $pubsub_diff{$project} = ( $pubsub{"$project"} - $data[2] );
                $cloudfunctions_diff{$project} =
                    ( $cloudfunctions{$project} - $data[3] );
                $logging_diff{$project} = ( $logging{$project} - $data[4] );
                $cloudStorage_diff{$project} =
                    ( $cloudStorage{$project} - $data[5] );
                $total_diff{$project} = ( $total{$project} - $data[6] );
                $yesterday_total += $total_diff{$project};
            }
        }
        else {
            $total_diff{$project} = "";    # N/A
        }
    }
    else {
        $computeEngine_diff{$project}  = $computeEngine{$project};
        $pubsub_diff{$project}         = $pubsub{$project};
        $cloudfunctions_diff{$project} = $cloudfunctions{$project};
        $logging_diff{$project}        = $logging{$project};
        $cloudStorage_diff{$project}   = $cloudStorage{$project};
        $total_diff{$project}          = $total{$project};
        $yesterday_total += $total_diff{$project};
    }
}

# Populate the gcp_reporting database with today's dollar amounts

foreach my $project ( @{ $config->{gcp}{projects} } ) {
    my $sum;
    my $compute   = $computeEngine{$project};
    my $storage   = $cloudStorage{$project};
    my $logs      = $logging{$project};
    my $functions = $cloudfunctions{$project};
    my $pubs      = $pubsub{$project};
    $sum = $total{$project};

    my $grab =
        $connect->prepare("SELECT * FROM \`$project\` WHERE report_date = ?");
    $grab->execute($today_mysqlformat);

    if ( $grab->rows == 0 ) {

        # Data is not there yet for today, let's put it in there!
        $connect->prepare(
            "INSERT INTO \`$project\` (report_date, compute_engine_tally,
            pubsub_tally, cloudfunctions_tally, logging_tally,
            cloud_storage_tally, grand_total) VALUES (?, ?, ?, ?, ?, ?, ?);"
        );
        $connect->execute( $today_mysqlformat, $compute,
            $pubs, $functions, $logs, $storage, $sum );
    }
    else {
# print $MAILSEND "\nSkipping DB entry for $project - today's data already exists.\n";
    }
}

my $report = "Mime-Version: 1.0
Content-Type: text/html; charset='UTF-8'
To: " . join( ',', @{ $config->{report}{recipients} } ) . "
From: $config->{report}{from}
Subject: GCP Report for $current_day

<!doctype html>
<html lang='en'>
<head>
	<meta charset='utf-8'>
	<style type='text/css'>
		/* All columns except first align right */
		td + td, th + th { text-align: right; }
		table {
			border-collapse: collapse;
			border-spacing: 0;
			empty-cells: show;
			border: 1px solid #cbcbcb;
		}
		thead {
			background-color: #e0e0e0;
			color: #000;
			text-align: left;
			vertical-align: bottom;
		}
		th, td {
			border-width: 0 0 1px 0;
			border-bottom: 1px solid #cbcbcb;
			font-size: inherit;
			margin: 0;
			overflow: visible;
			padding: .5em 1em;
		}
		td { background-color: transparent; }
		caption {
			color: #000;
			padding: 1em 0;
			text-align: center;
			font: italic 85%/1 arial,sans-serif;
		}
		body {
			margin: 1em;
			font-family: sans-serif;
			-webkit-text-size-adjust: 100%;
			ms-text-size-adjust: 100%;
		}
		a { background-color: transparent }
		h1 { font-size:2em; margin:.67em 0; }
		tbody > tr:hover, tfoot > tr:hover { background-color: #f2f2f2; }
		tfoot { font-weight: 700; }
		.neg { font-weight: 700; color: red; }
	</style>
</head>
<body>

Google Cloud Platform Report for $current_day";
if ( $today eq "01" ) {
    $report
        .= "Yesterday was the first day of the billing period, so all tallies are reset!\n\n";
}

$report .= "<h2>Totals by project</h2>
<table>
	<thead>
		<tr>
			<th>Project name</th>
			<th>This month</th>
			<th>Yesterday</th>
		</tr>
	</thead>
	<tbody>";

foreach my $project ( @{ $config->{gcp}{projects} } ) {
    $report .= "
		<tr>
			<td><a href=\"#$project\">$project</a></td>
			<td>\$" . sprintf( "%.2f", $total{$project} ) . "</td>
			<td>" . print_diff( $total_diff{$project} ) . "</td>
		</tr>";
}
$report .= "
		<tr>
			<td>(support contract)</td>
			<td>\$" . sprintf( "%.2f", $supportCost ) . "</td>
			<td>--</td>
		</tr>
	</tbody>
	<tfoot>
		<tr>
			<td>Grand Total</td>
			<td>\$" . sprintf($grand_total) . "</td>
			<td>" . print_diff($yesterday_total) . "</td>
		</tr>
	</tfoot>
</table>";

foreach my $project ( @{ $config->{gcp}{projects} } ) {
    my $proj_total =
          $computeEngine{"$project"}
        + $cloudStorage{"$project"}
        + $logging{"$project"}
        + $cloudfunctions{"$project"}
        + $pubsub{"$project"};
    $report
        .= "<a name=\"$project\" id=\"$project\"></a><h2>Report for account $project</h2>
<table>
	<thead>
		<tr>
			<th>Service</th>
			<th>This month</th>
			<th>Yesterday</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>compute-engine</td>
			<td>\$$computeEngine{$project}</td>
			<td>" . print_diff( $computeEngine_diff{$project} ) . "</td>
		</tr>
		<tr>
			<td>cloud-storage</td>
			<td>\$$cloudStorage{$project}</td>
			<td>" . print_diff( $cloudStorage_diff{$project} ) . "</td>
		</tr>
		<tr>
			<td>logging</td>
			<td>\$$logging{$project}</td>
			<td>" . print_diff( $logging_diff{$project} ) . "</td>
		</tr>
		<tr>
			<td>cloudfunctions</td>
			<td>\$$cloudfunctions{$project}</td>
			<td>" . print_diff( $cloudfunctions_diff{$project} ) . "</td>
		</tr>
		<tr>
			<td>pubsub</td>
			<td>\$$pubsub{$project}</td>
			<td>" . print_diff( $pubsub_diff{$project} ) . "</td>
		</tr>
	</tbody>
	<tfoot>
		<tr>
			<td>Total for $project</td>
			<td>\$" . sprintf( "%.2f", $proj_total ) . "</td>
			<td>" . print_diff( $total_diff{$project} ) . "</td>
		</tr>
	</tfoot>
	</table>";
}
$report .= "</body></html>";

my $cmd =
    defined $ENV{REPORT_DEBUG} ? "tee report.html" : "/usr/sbin/sendmail -t";
open my $MAILSEND, "|-", $cmd;
print $MAILSEND $report;
close($MAILSEND);
