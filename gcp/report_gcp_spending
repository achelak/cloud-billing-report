#!/usr/bin/perl
# Written by Erich Weiler
# Get Google Cloud Platform Daily costs and report via email to users
# This must run via cron each day at 9:00am PST or later
use strict;
use warnings;
use File::Spec::Functions 'catfile';
use File::Temp;
use List::Util 'sum';
use Text::CSV;
use Time::Piece;
use Time::Seconds;

chdir('/root/gcp-reporting');

# Load configuration
my $config = do "./config.pl";
die "Error parsing config file: $@" if $@;
die "Error reading config file: $!" unless defined $config;

# === Calculate dates (...is this now?) ===
my $report_date =
    defined $ARGV[0] ? $ARGV[0] : ( localtime() - ONE_DAY )->ymd;
my $report_date_obj = localtime->strptime( $report_date, '%Y-%m-%d' );

# Bucket name with billing data in it
my $bucket     = $config->{gcp}{bucket};
my $total_cost = 0;

# Get all GCP billing CSV files for the month so far
# %service_by_project_today contains costs in %service_by_project
my ( %service_by_project, %service_by_project_today );
my $cache_dir = File::Temp::tempdir( CLEANUP => 1 );
my $first_day = localtime()->strftime('%Y-%m-01');
my $csv_date  = Time::Piece->strptime( $first_day, '%Y-%m-%d' );

# GCP only shows charges for a single day in each CSV file,
# so we need to get them all for this month before tallying stats
while ( $csv_date <= $report_date_obj ) {
    my $fname             = "billing-report--" . $csv_date->ymd . ".csv";
    my $local_report_path = catfile( $cache_dir, $fname );
    unless ( -e $local_report_path ) {
        `/root/google-cloud-sdk/bin/gsutil -q cp gs://$bucket/$fname $cache_dir`;
    }
    my $csv = Text::CSV->new( { binary => 1, auto_diag => 1, strict => 1 } );
    open my $report, "<:encoding(utf8)", $local_report_path
        or die "$local_report_path: $!, stopping";
    my @cols = @{ $csv->getline($report) };
    my $row  = {};
    $csv->bind_columns( \@{$row}{@cols} );
    while ( $csv->getline($report) ) {
        my $service = ( split( '/', $row->{'Line Item'} ) )[2];
        my $project = $row->{'Project Name'};
        my $cost    = $row->{'Cost'};
        if ( $project eq '' ) {
            $project = '(none)';
        }
        $service_by_project{$project}->{$service} += $cost;
        if ( $csv_date->ymd eq $report_date ) {
            $service_by_project_today{$project}->{$service} += $cost;
        }
    }
    close $report or warn "$local_report_path $!";
    $csv_date += ONE_DAY;
}

# The cost differential subroutine
my $warning_threshold =
    defined ${config}->{report}{warning_threshold}
    ? ${config}->{report}{warning_threshold}
    : -1;

# print_diff(amount) to print an amount, with highlighting if amount is large
# print_diff(amount, warnflag) to  print an amount, without highlighting
sub print_diff {
    my ( $amount, $nowarn ) = @_;
    my $warn = $warning_threshold > 0 && !defined $nowarn;

   # Some services do not have history stored because of the current db schema
   # and will be passed to `print_diff` as undef
    if ( not( defined $amount ) or $amount eq "" ) {
        return "N/A";

        # Ignore sufficiently small amounts
    }
    elsif ( $warn and $amount > $warning_threshold ) {
        return sprintf( "<span class='unusual'>\$%.2f</span>", $amount );
    }
    elsif ( $amount > 0.01 ) {
        return sprintf( "\$%.2f", $amount );
    }
    elsif ( $amount < -0.01 ) {

        # A negative value is unlikely but possible in the event of, for
        # example, a credit
        my $absolute = sprintf( "-\$%.2f", abs($amount) );
        return "<span class='unusual'>$absolute</span>";
    }
    else {
        return "";
    }
}

my $report = "Mime-Version: 1.0
Content-Type: text/html; charset='UTF-8'
To: " . join( ',', @{ $config->{report}{recipients} } ) . "
From: $config->{report}{from}
Subject: GCP Report for " . $report_date_obj->strftime('%B %d, %Y') . "

<!doctype html>
<html lang='en'>
<head>
	<meta charset='utf-8'>
	<style type='text/css'>
		/* All columns except first align right */
		td + td, th + th { text-align: right; }
		table {
			border-collapse: collapse;
			border-spacing: 0;
			empty-cells: show;
			border: 1px solid #cbcbcb;
		}
		thead {
			background-color: #e0e0e0;
			color: #000;
			text-align: left;
			vertical-align: bottom;
		}
		th, td {
			border-width: 0 0 1px 0;
			border-bottom: 1px solid #cbcbcb;
			font-size: inherit;
			margin: 0;
			overflow: visible;
			padding: .5em 1em;
		}
		td { background-color: transparent; }
		caption {
			color: #000;
			padding: 1em 0;
			text-align: center;
			font: italic 85%/1 arial,sans-serif;
		}
		body {
			margin: 1em;
			font-family: sans-serif;
			-webkit-text-size-adjust: 100%;
			ms-text-size-adjust: 100%;
		}
		a { background-color: transparent }
		h1 { font-size:2em; margin:.67em 0; }
		tbody > tr:hover, tfoot > tr:hover { background-color: #f2f2f2; }
		tfoot { font-weight: 700; }
		.unusual { font-weight: 700; color: red; }
	</style>
</head>
<body>

Google Cloud Platform Report for "
    . $report_date_obj->strftime('%A, %d %B %Y') . "

<h2>Totals by project</h2>
<table>
	<thead>
		<tr>
			<th>Project name</th>
			<th>This month</th>
			<th>Yesterday</th>
		</tr>
	</thead>
	<tbody>";

my $grand_total       = 0;
my $today_grand_total = 0;
foreach my $project ( sort keys %service_by_project ) {
    my $total       = sum values %{ $service_by_project{$project} };
    my $today_total = sum values %{ $service_by_project_today{$project} };
    $grand_total       += defined $total       ? $total       : 0;
    $today_grand_total += defined $today_total ? $today_total : 0;
    $report .= "
		<tr>
			<td><a href='#$project'>$project</a></td>
			<td>" . sprintf( '$%.2f', $total ) . "</td>
			<td>" . print_diff($today_total) . "</td>
		</tr>";
}
$report .= "
	</tbody>
	<tfoot>
		<tr>
			<td>Grand Total</td>
			<td>\$" . sprintf( "%.2f", $grand_total ) . "</td>
			<td>" . print_diff( $today_grand_total, 1 ) . "</td>
		</tr>
	</tfoot>
</table>";

foreach my $project ( sort keys %service_by_project ) {
    my $account_total = sum values %{ $service_by_project{$project} };
    my $account_today = sum values %{ $service_by_project_today{$project} };
    $report .= "<a name='$project' id='$project'></a>
<h2>Report for account $project</h2>
<table>
	<thead>
		<tr>
			<th>Service</th>
			<th>This month</th>
			<th>Yesterday</th>
		</tr>
	</thead>";
    foreach my $service ( sort keys %{ $service_by_project{$project} } ) {
        my $cost       = $service_by_project{$project}{$service};
        my $today_cost = $service_by_project_today{$project}{$service};
        $report .= "<tbody>
                <tr>
                    <td>$service</td>
                    <td>" . sprintf( "%.2f", $cost ) . "</td>
                    <td>" . print_diff($today_cost) . "</td>
                </tr>";
    }
    $report .= "</tbody><tfoot>
		<tr>
			<td>Total for $project</td>
			<td>" . sprintf( '$%.2f', $account_total ) . "</td>
			<td>" . print_diff($account_today) . "</td>
		</tr>
	</tfoot>
	</table>";
}
$report .= "
<hr>
Source code for this report is available on
<a href='https://github.com/ucsc-cgp/cloud-billing-report'>GitHub</a>. You
can report <a href='https://github.com/ucsc-cgp/cloud-billing-report/issues'>
issues</a> there, too.
</body></html>";

print $report;

